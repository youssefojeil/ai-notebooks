import time

from google.cloud import bigquery
import gradio as gr
from vertexai.generative_models import FunctionDeclaration, GenerativeModel, Part, Tool

BIGQUERY_DATASET_ID = "thelook_ecommerce"

list_datasets_func = FunctionDeclaration(
    name="list_datasets",
    description="Get a list of datasets that will help answer the user's question",
    parameters={
        "type": "object",
        "properties": {},
    },
)

list_tables_func = FunctionDeclaration(
    name="list_tables",
    description="List tables in a dataset that will help answer the user's question",
    parameters={
        "type": "object",
        "properties": {
            "dataset_id": {
                "type": "string",
                "description": "Dataset ID to fetch tables from.",
            }
        },
        "required": [
            "dataset_id",
        ],
    },
)

get_table_func = FunctionDeclaration(
    name="get_table",
    description="Get information about a table, including the description, schema, and number of rows that will help answer the user's question. Always use the fully qualified dataset and table names.",
    parameters={
        "type": "object",
        "properties": {
            "table_id": {
                "type": "string",
                "description": "Fully qualified ID of the table to get information about",
            }
        },
        "required": [
            "table_id",
        ],
    },
)

sql_query_func = FunctionDeclaration(
    name="sql_query",
    description="Get information from data in BigQuery using SQL queries",
    parameters={
        "type": "object",
        "properties": {
            "query": {
                "type": "string",
                "description": "SQL query on a single line that will help give quantitative answers to the user's question when run on a BigQuery dataset and table. In the SQL query, always use the fully qualified dataset and table names.",
            }
        },
        "required": [
            "query",
        ],
    },
)

sql_query_tool = Tool(
    function_declarations=[
        list_datasets_func,
        list_tables_func,
        get_table_func,
        sql_query_func,
    ],
)

model = GenerativeModel(
    "gemini-1.5-pro",
    generation_config={"temperature": 0},
    tools=[sql_query_tool],
)

def bigquery_chat(prompt):
    client = bigquery.Client()
    chat = model.start_chat()

    prompt += """
        Please give a concise, high-level summary followed by detail in
        plain language about where the information in your response is
        coming from in the database. Only use information that you learn
        from BigQuery, do not make up information.
        """

    try:
        response = chat.send_message(prompt)
        response = response.candidates[0].content.parts[0]

        api_requests_and_responses = []
        backend_details = ""

        function_calling_in_process = True
        while function_calling_in_process:
            try:
                params = {}
                for key, value in response.function_call.args.items():
                    params[key] = value

                if response.function_call.name == "list_datasets":
                    api_response = BIGQUERY_DATASET_ID
                    api_requests_and_responses.append(
                        [response.function_call.name, params, api_response]
                    )

                elif response.function_call.name == "list_tables":
                    api_response = client.list_tables(params["dataset_id"])
                    api_response = str([table.table_id for table in api_response])
                    api_requests_and_responses.append(
                        [response.function_call.name, params, api_response]
                    )

                elif response.function_call.name == "get_table":
                    api_response = client.get_table(params["table_id"])
                    api_response = api_response.to_api_repr()
                    api_requests_and_responses.append(
                        [
                            response.function_call.name,
                            params,
                            [
                                str(api_response.get("description", "")),
                                str(
                                    [
                                        column["name"]
                                        for column in api_response["schema"][
                                            "fields"
                                        ]
                                    ]
                                ),
                            ],
                        ]
                    )
                    api_response = str(api_response)

                elif response.function_call.name == "sql_query":
                    job_config = bigquery.QueryJobConfig(
                        maximum_bytes_billed=100000000
                    )  # Data limit per query job
                    try:
                        cleaned_query = (
                            params["query"].replace("\\n", " ").replace("\n", "").replace("\\", "")
                        )
                        query_job = client.query(
                            cleaned_query, job_config=job_config
                        )
                        api_response = query_job.result()
                        api_response = str([dict(row) for row in api_response])
                        api_response = api_response.replace("\\", "").replace(
                            "\n", ""
                        )
                        api_requests_and_responses.append(
                            [response.function_call.name, params, api_response]
                        )
                    except Exception as e:
                        return f"Error: {str(e)}"

                response = chat.send_message(
                    Part.from_function_response(
                        name=response.function_call.name,
                        response={
                            "content": api_response,
                        },
                    ),
                )
                response = response.candidates[0].content.parts[0]

                backend_details += f"- Function call:\n   - Function name: `{api_requests_and_responses[-1][0]}`\n"
                backend_details += f"   - Function parameters: `{api_requests_and_responses[-1][1]}`\n"
                backend_details += f"   - API response: `{api_requests_and_responses[-1][2]}`\n"

            except AttributeError:
                function_calling_in_process = False

        time.sleep(3)
        return response.text + "\n\nFunction calls, parameters, and responses:\n" + backend_details

    except Exception as e:
        return f"Error: {str(e)}"

iface = gr.Interface(
    fn=bigquery_chat,
    inputs="text",
    outputs="text",
    title="SQL Talk with BigQuery",
    description="Ask me about information in the BigQuery database...",
    examples=[
        "What kind of information is in this database?",
        "What percentage of orders are returned?",
        "How is inventory distributed across our regional distribution centers?",
        "Do customers typically place more than one order?",
        "Which product categories have the highest profit margins?",
    ],
)

iface.launch()
